AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda function for testing no-commit scenario'

Parameters:
  FunctionName:
    Type: String
    Default: test-lambda-function
    Description: Name of the Lambda function

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: LambdaExecutionRole

  TestLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref FunctionName
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'message': 'Hello from test Lambda function!',
                      'event': event
                  })
              }
      Description: Test Lambda function for Yor tagging
      Timeout: 30
      MemorySize: 128
      Tags:
        - Key: Name
          Value: TestLambdaFunction

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FunctionName}"
      RetentionInDays: 14

Outputs:
  FunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt TestLambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-FunctionArn"

  FunctionName:
    Description: Name of the Lambda function
    Value: !Ref TestLambdaFunction
    Export:
      Name: !Sub "${AWS::StackName}-FunctionName"